// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  password         String
  fullName         String
  email            String?   @unique
  emailVerified    DateTime?
  phoneNumber      Int       @unique
  profilePhoto     String?
  dateOfBirth      DateTime?
  registrationDate DateTime  @default(now())
  lastLogin        DateTime?
  address          Address[]

  gender Gender
  role   Role   @default(Citizen)

  citizen       Citizen?
  policeOfficer PoliceOfficer?
  detective     Detective?
  administrator Administrator?
  userDocuments UserDocuments?
}

model UserDocuments {
  id                   String  @id @default(cuid())
  userId               String  @unique
  voterIdNumber        String?
  voterIdPhoto         String?
  aadharCardNumber     String?
  aadharCardPhoto      String?
  panCardNumber        String?
  panCardPhoto         String?
  passportNumber       String?
  passportPhoto        String?
  drivingLicenceNumber String?
  drivingLicencePhoto  String?

  isVerified Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
}

model Address {
  id              String            @id @default(cuid())
  userId          String            @unique
  type            AddressType       @default(CurrentAddress)
  country         String
  state           String
  city            String
  postalCode      String
  street          String?
  landmark        String?
  houseNumber     String?
  activeDetective Detective[]
  policeStation   PoliceStation?
  TransferredTo   TransferHistory[] @relation("TransferredTo")
  TransferredFrom TransferHistory[] @relation("TransferredFrom")
  user            User              @relation(fields: [userId], references: [id])
}

enum AddressType {
  CurrentAddress
  PermanentAddress
}

enum Gender {
  Male
  Female
}

model Citizen {
  userId                  String               @id @unique
  user                    User                 @relation(fields: [userId], references: [id])
  licenseApplications     LicenseApplication[]
  complaints              Complaint[]
  notificationPreferences String?
}

model PoliceOfficer {
  userId            String            @id @unique
  user              User              @relation(fields: [userId], references: [id])
  badgeNumber       String            @unique
  assignedCaseId    String?
  assignedStationId String?
  rank              Rank?
  department        Department[]
  assignedStation   PoliceStation?    @relation(fields: [assignedStationId], references: [id])
  assignedCases     CaseAssignment?   @relation(fields: [assignedCaseId], references: [id])
  caseHistory       CaseHistory[]
  transferHistory   TransferHistory[]
}

enum Rank {
  Constable
  TrafficPolice
  SubInspector
  Inspector
  DSP
  SP
  DCP
  IGP
  ADGP
  DGP
}

enum Department {
  Traffic
  Crime
  CyberCrime
  Narcotics
  WemenSafety
  SpecialInvestigation
}

model Detective {
  userId            String           @id @unique
  user              User             @relation(fields: [userId], references: [id])
  investigationArea Address[]
  activeCases       CaseAssignment[]
  specialization    String
  caseHistory       CaseHistory[]
}

enum DetectiveSpecialization {
  CyberCrime
  Narcotics
  WemenSafety
  SpecialInvestigation
}

enum CaseType {
  Criminal
  Civil
  Traffic
  CyberCrime
  Narcotics
  WemenSafety
  SpecialInvestigation
}

model Administrator {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PoliceStation {
  id          String          @id @default(cuid())
  stationName String
  locationId  String?         @unique
  departments String[]
  location    Address?        @relation(fields: [locationId], references: [id])
  officers    PoliceOfficer[]
}

model LicenseApplication {
  id         String    @id @default(cuid())
  citizenId  String
  citizen    Citizen   @relation(fields: [citizenId], references: [userId])
  type       String
  status     String
  appliedAt  DateTime  @default(now())
  approvedAt DateTime?
}

model Complaint {
  id            String    @id @default(cuid())
  citizenId     String
  citizen       Citizen   @relation(fields: [citizenId], references: [userId])
  title         String
  description   String
  status        String
  filedAt       DateTime  @default(now())
  actionTakenAt DateTime?
}

model CaseAssignment {
  id          String          @id @default(cuid())
  caseId      String
  detectiveId String?
  caseType    CaseType
  caseStatus  CaseStatus      @default(Pending)
  officer     PoliceOfficer[]
  detective   Detective?    @relation(fields: [detectiveId], references: [userId])
  assignedAt  DateTime      @default(now())
  CaseHistory CaseHistory[]
}

enum CaseStatus {
  Pending
  Open
  InProgress
  Closed
}

model TransferHistory {
  id            String        @id @default(cuid())
  officerId     String
  officer       PoliceOfficer @relation(fields: [officerId], references: [userId])
  fromStationId String
  toStationId   String
  toStation     Address       @relation("TransferredTo", fields: [toStationId], references: [id])
  fromStation   Address       @relation("TransferredFrom", fields: [fromStationId], references: [id])
  transferredAt DateTime      @default(now())
}

model CaseHistory {
  id              String         @id @default(cuid())
  detectiveId     String
  policeOfficerId String
  policeOfficer   PoliceOfficer  @relation(fields: [policeOfficerId], references: [userId])
  detective       Detective      @relation(fields: [detectiveId], references: [userId])
  caseId          String
  case            CaseAssignment @relation(fields: [caseId], references: [id])
  details         String
  updatedAt       DateTime       @default(now())
}

enum Role {
  Citizen
  PoliceOfficer
  Detective
  Administrator
}
