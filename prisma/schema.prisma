generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  password         String
  fullName         String
  email            String?        @unique
  emailVerified    DateTime?
  phoneNumber      String         @unique
  dateOfBirth      DateTime?
  registrationDate DateTime       @default(now())
  lastLogin        DateTime?
  gender           Gender
  role             Role           @default(Citizen)
  administrator    Administrator?
  board            Board?
  citizen          Citizen?
  detective        Detective?
  profilePhoto     Image?
  policeOfficer    PoliceOfficer?
  userDocuments    UserDocuments?
  Address          Address[]
}

model Image {
  id            String         @id @default(cuid())
  userId        String?        @unique
  stationId     String?        @unique
  url           String?
  alt           String?
  public_id     String
  policeStation PoliceStation? @relation(fields: [stationId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
}

model UserDocuments {
  id                   String  @id @default(cuid())
  userId               String  @unique
  voterIdNumber        String?
  voterIdPhoto         String?
  aadharCardNumber     String?
  aadharCardPhoto      String?
  panCardNumber        String?
  panCardPhoto         String?
  passportNumber       String?
  passportPhoto        String?
  drivingLicenceNumber String?
  drivingLicencePhoto  String?
  isVerified           Boolean @default(false)
  user                 User    @relation(fields: [userId], references: [id])
}

model Address {
  id              String            @id @default(cuid())
  type            AddressType?
  country         String            @default("India")
  state           String
  city            String
  postalCode      String
  street          String?
  landmark        String?
  district        String
  address         String?
  zone            Zone?
  policeStation   PoliceStation?
  TransferredFrom TransferHistory[] @relation("TransferredFrom")
  TransferredTo   TransferHistory[] @relation("TransferredTo")
  activeDetective Detective[]       @relation("AddressToDetective")
  User            User[]
}

model Board {
  userId            String          @id @unique
  type              BoardType
  user              User            @relation(fields: [userId], references: [id])
  recruitedOfficers PoliceOfficer[]
}

model Citizen {
  userId                  String               @id @unique
  notificationPreferences String?
  user                    User                 @relation(fields: [userId], references: [id])
  complaints              Complaint[]
  licenseApplications     LicenseApplication[]
}

model PoliceOfficer {
  userId            String            @id @unique
  badgeNumber       String?           @unique
  assignedCaseId    String?
  assignedStationId String?
  rank              Rank?
  department        Department[]
  recruiterId       String?
  joiningDate       DateTime          @default(now())
  caseHistory       CaseHistory[]
  assignedCases     CaseAssignment?   @relation(fields: [assignedCaseId], references: [id])
  assignedStation   PoliceStation?    @relation(fields: [assignedStationId], references: [id])
  recruitedBy       Board?            @relation(fields: [recruiterId], references: [userId])
  user              User              @relation(fields: [userId], references: [id])
  PsHead            PoliceStation?    @relation("PsHead")
  transferHistory   TransferHistory[]
}

model Detective {
  userId            String           @id @unique
  specialization    String?
  activeCases       CaseAssignment[]
  caseHistory       CaseHistory[]
  user              User             @relation(fields: [userId], references: [id])
  investigationArea Address[]        @relation("AddressToDetective")
}

model Administrator {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PoliceStation {
  id           String          @id @default(cuid())
  stationName  String
  locationId   String?         @unique
  departments  String[]
  SHOId        String?         @unique
  stationMail  String?
  stationPhone String?
  stationImage Image?
  officers     PoliceOfficer[]
  SHO          PoliceOfficer?  @relation("PsHead", fields: [SHOId], references: [userId])
  location     Address?        @relation(fields: [locationId], references: [id])
}

model LicenseApplication {
  id         String    @id @default(cuid())
  citizenId  String
  type       String
  status     String
  appliedAt  DateTime  @default(now())
  approvedAt DateTime?
  citizen    Citizen   @relation(fields: [citizenId], references: [userId])
}

model Complaint {
  id            String    @id @default(cuid())
  citizenId     String
  title         String
  description   String
  status        String
  filedAt       DateTime  @default(now())
  actionTakenAt DateTime?
  citizen       Citizen   @relation(fields: [citizenId], references: [userId])
}

model CaseAssignment {
  id          String          @id @default(cuid())
  caseId      String
  detectiveId String?
  caseType    CaseType
  caseStatus  CaseStatus      @default(Pending)
  assignedAt  DateTime        @default(now())
  detective   Detective?      @relation(fields: [detectiveId], references: [userId])
  CaseHistory CaseHistory[]
  officer     PoliceOfficer[]
}

model TransferHistory {
  id            String        @id @default(cuid())
  officerId     String
  fromStationId String
  toStationId   String
  transferredAt DateTime      @default(now())
  fromStation   Address       @relation("TransferredFrom", fields: [fromStationId], references: [id])
  officer       PoliceOfficer @relation(fields: [officerId], references: [userId])
  toStation     Address       @relation("TransferredTo", fields: [toStationId], references: [id])
}

model CaseHistory {
  id              String         @id @default(cuid())
  detectiveId     String
  policeOfficerId String
  caseId          String
  details         String
  updatedAt       DateTime       @default(now())
  case            CaseAssignment @relation(fields: [caseId], references: [id])
  detective       Detective      @relation(fields: [detectiveId], references: [userId])
  policeOfficer   PoliceOfficer  @relation(fields: [policeOfficerId], references: [userId])
}

enum Zone {
  North
  South
  East
  West
  Central
}

enum AddressType {
  CurrentAddress
  PermanentAddress
}

enum Gender {
  Male
  Female
}

enum BoardType {
  State
  Central
}

enum Rank {
  Constable
  TrafficPolice
  ASI
  SI
  Inspector
  DSP
  SP
  DIG
  IG
  ADG
  DGP
}

enum Department {
  Traffic
  Crime
  CyberCrime
  Narcotics
  WemenSafety
  SpecialInvestigation
}

enum DetectiveSpecialization {
  CyberCrime
  Narcotics
  WemenSafety
  SpecialInvestigation
}

enum CaseType {
  Criminal
  Civil
  Traffic
  CyberCrime
  Narcotics
  WemenSafety
  SpecialInvestigation
}

enum CaseStatus {
  Pending
  Open
  InProgress
  Closed
}

enum Role {
  Citizen
  PoliceOfficer
  Detective
  Administrator
  Board
}
